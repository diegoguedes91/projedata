package application;

import java.text.NumberFormat;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.Period;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Scanner;

import entities.Employee;

public class Main {

	public static void main(String[] args) throws ParseException {
		
		
		Locale.setDefault(Locale.US);
		Locale localeBr = new Locale("pt", "BR");
		NumberFormat currency = NumberFormat.getCurrencyInstance(localeBr);
		
		Scanner sc = new Scanner(System.in);
		
		DateTimeFormatter fmt = DateTimeFormatter.ofPattern("dd/MM/yyyy");
		
		List<Employee> list = new ArrayList<>(); 
		
		
		list.add(new Employee("Maria", LocalDate.parse("18/10/2000", fmt), 2009.44, "Operador"));
		list.add(new Employee("João", LocalDate.parse("12/05/1990", fmt), 2284.38, "Operador"));
		list.add(new Employee("Caio", LocalDate.parse("02/05/1961", fmt), 9836.14, "Coordenador"));
		list.add(new Employee("Miguel", LocalDate.parse("14/10/1988", fmt), 19116.88, "Diretor"));
		list.add(new Employee("Alice", LocalDate.parse("05/01/1995", fmt), 2234.68, "Recepcionista"));
		list.add(new Employee("Heitor", LocalDate.parse("19/11/1999", fmt), 1582.72, "Operador"));
		list.add(new Employee("Arthur", LocalDate.parse("31/03/1993", fmt), 4071.84, "Contador"));
		list.add(new Employee("Laura", LocalDate.parse("08/07/1994", fmt), 3017.45, "Gerente"));
		list.add(new Employee("Heloísa", LocalDate.parse("24/05/2003", fmt), 1606.85, "Eletrecista"));
		list.add(new Employee("Helena", LocalDate.parse("02/09/1996", fmt), 2799.93, "Gerente"));
		

		// Remover o funcionário “João” da lista
		for(int i = 0; i < list.size(); i++) {
			Employee emp = list.get(i);
			if(emp.getName().equals("João")) {
				list.remove(emp);
			}
		}

		// Lista Funcionarios 
		System.out.println("Lista de Funcionários");
		for(Employee emp : list) {
			System.out.println(emp);
		}
		
		// Os funcionários receberam 10% de aumento de salário
		System.out.println();
		for(Employee emp: list) {
			emp.increaseSalary(10);
		}
		System.out.println("Lista de Funcionários após o aumento de 10%");
		for(Employee emp : list) {
			System.out.println(emp);
		}
		
		// Agrupar os funcionários por função em um MAP, sendo a chave a “função” e o valor a “lista de funcionários”.
		
		// Imprimir os funcionários, agrupados por função.
		Map<String, List<Employee>> agruparPorFunc = new HashMap<String, List<Employee>>();
		for(Employee emp: list) {
			var funcao = emp.getFunction();
			var funcaoEncontrada = agruparPorFunc.get(funcao);
			if(funcaoEncontrada == null) {
				funcaoEncontrada = new ArrayList<>();
				funcaoEncontrada.add(emp); 
				agruparPorFunc.put(funcao, funcaoEncontrada);
				continue; 
			}
			funcaoEncontrada.add(emp);
		}
		
		System.out.println(agruparPorFunc);

		
		// Imprimir os funcionários que fazem aniversário no mês 10 e 12.
		System.out.println();
		System.out.println("Lista de Funcionários que fazem aniversário no mês 10 e 12");
		for(Employee emp : list) {
			if(emp.getBirthDate().getMonthValue() == 10 || emp.getBirthDate().getMonthValue() == 12)
			System.out.println(emp);
		}
		
		//Imprimir o funcionário com a maior idade, exibir os atributos: nome e idade
		System.out.println();
		System.out.println("Funcionário com a maior idade");
		String nameMaxAge = ""; 
		int age = 0; 
		for(int i = 0; i < list.size(); i ++ ) {
			Employee emp = list.get(i);
			
			// Descobrindo a idade de cada membro da lista
			Period period = Period.between(emp.getBirthDate(), LocalDate.now());
			int cont = period.getYears(); 
			if(age < cont) {
				age = cont; 
				nameMaxAge = emp.getName();
			}
		}
		System.out.println("Nome: " + nameMaxAge + " Idade: " + age);
		
		// Imprimir a lista de funcionários por ordem alfabética.
		System.out.println();
		System.out.println("Lista em ordem alfabetica");
		List<Employee> alphabeticalOrder = new ArrayList<>(list); 
		alphabeticalOrder.sort(Comparator.comparing(Employee::getName));
		for(Employee emp : alphabeticalOrder) {
			System.out.println(emp);
		}
		
		// Imprimir o total dos salários dos funcionários.
		System.out.println();
		System.out.println("Total do salário dos Funcionários");
		double totalSalary = 0.0; 
		for(Employee emp : list) {
			totalSalary += emp.getSalary(); 
		}
		System.out.println("Valor total do salário dos funcionário: " + currency.format(totalSalary));
		
		
		// – Imprimir quantos salários mínimos ganha cada funcionário, considerando que o salário mínimo é R$1212.00.
		System.out.println();
		for(Employee emp : list) {
			System.out.println(emp.getName() + " recebe " + (int)emp.minimum_salary() + " salário(s) mínimo");
		}
		
		sc.close();
	}

}
